/*
2631 줄세우기

KOI 어린이집에는 N명의 아이들이 있다. 
오늘은 소풍을 가는 날이다. 선생님은 1번부터 N번까지 번호가 적혀있는 번호표를 아이들의 가슴에 붙여주었다. 
선생님은 아이들을 효과적으로 보호하기 위해 목적지까지 번호순서대로 일렬로 서서 걸어가도록 하였다. 
이동 도중에 보니 아이들의 번호순서가 바뀌었다. 그래서 선생님은 다시 번호 순서대로 줄을 세우기 위해서 아이들의 위치를 옮기려고 한다. 
그리고 아이들이 혼란스러워하지 않도록 하기 위해 위치를 옮기는 아이들의 수를 최소로 하려고 한다.

N명의 아이들이 임의의 순서로 줄을 서 있을 때, 번호 순서대로 배치하기 위해 옮겨지는 아이의 최소 수를 구하는 프로그램을 작성하시오.

몇가지 예제를 확인해보면 쉽게 파악할 수 있다.
N 3일때 123 이라면 0이고 132라면 3만 옮겨주면 되므로 1이다. 이때 3을 제외한 12가 오름차순이다.
N 5일때 13245라고하면 3만 옮겨주면 되고 3을 제외한 1245가 오름차순이다.

따라서 연속하지않은 오름차순의 최대값을 구해 N에서 제외해주면 된다는 것을 알 수 있다.

+
else로 오름차순이 아닌경우에 따로 처리를 해주지않아서 한번 틀렸었다. 예외처리 조심하자
*/
#include <iostream>
#include <algorithm>
using namespace std;

int N, maxArr = 0;
int arr[200];
int dpUp[200] = { 0, };

int main() {
	cin >> N;
	for (int i = 0; i < N; i++)
		cin >> arr[i];
	dpUp[0] = 1;
	for (int i = 0; i < N; i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			if (arr[i] < arr[j])
				dpUp[j] = max(dpUp[i] + 1, dpUp[j]);
			else
				dpUp[j] = max(1, dpUp[j]);
		}
		maxArr = max(maxArr, dpUp[i]);
	}
	cout << N - maxArr;
	return 0;
}