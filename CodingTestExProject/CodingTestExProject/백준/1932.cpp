/*
1932 정수 삼각형

위 그림은 크기가 5인 정수 삼각형의 한 모습이다.
맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라.
아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.
삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

인접한 비트의 개수 문제 풀고 dp 복습이 필요한 것 같아서 선택한 문제인데
논리적인 풀이는 바로 이해했는데 계속 구현에 있어서 인덱스 처리나 dp배열을 어떻게 구현할지 등에 시간이 꽤나 걸렸다.
구현시 망설였던부분은 최대값을 어떻게 찾는지 였는데 map,dp 둘다 이차원 배열을 써서
각 레벨 별 최대값을 바로 구해 저장할 필요없이 마지막에서 최대값을 다시 찾는 식으로 구현했다.

*/
#include <iostream>
#include <algorithm>
using namespace std;

int map[501][501] = { 0, };
int dp[501][501] = { 0, };
int answer = 0;
int main() {
	int N;
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < i + 1; j++)
		{
			cin >> map[i][j];
		}
	}
	dp[0][0] = map[0][0];
	for (int i = 1; i < N; i++)
	{
		for (int j = 0; j < i + 1; j++)
		{
			dp[i][j] = max(map[i][j] + dp[i - 1][j - 1], map[i][j] + dp[i - 1][j]);
		}
	}
	for (int i = 0; i < N; i++)
		answer = max(dp[N - 1][i], answer);
	cout << answer;

	return 0;
}