/*
2156 포도주 시식

효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.

포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
연속으로 놓여 있는 3잔을 모두 마실 수는 없다.
효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오.

예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.

"연속으로 놓여 있는 3잔을 모두 마실 수는 없다."

점화식 세우기에 어려운 문제였는데
3잔을 연속해서 마시지 않는 방법은
현재 i 에 대해 i는 마시고 i - 1의 섭취 유무로 따지면된다.
i-1 를 마신 경우 : i-2는 3연속이 되어 마시지 못 하므로 arr[i] + arr[i - 1] 와 dp[i - 3] (이전 값의 최대)
i-1 를 마시지 않은 경우 :  arr[i] 와 dp[i - 2](이전 값의 최대)

또한 이경우 외에도 예외가 있는데 2번연속으로 먹지 않는 경우가 더 클 수도 있어 dp[i-1]과 한번더 비교가 필요하다.

풀이 참고:
https://mygumi.tistory.com/98

DP정리:
https://www.notion.so/DP-044f9cf6503141e3ab2c585f9c3e8a68
*/
#include <iostream>
#include <algorithm>
using namespace std;

int arr[10001] = { 0, };
int dp[10001] = { 0, };

int main() {
	int N;
	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> arr[i];
	dp[1] = arr[1];
	dp[2] = dp[1] + arr[2];
	for (int i = 3; i <= N; i++)
	{
		dp[i] = max(dp[i - 1], max(dp[i - 2] + arr[i], dp[i - 3] + arr[i] + arr[i - 1]));
	}
	cout << dp[N];
	return 0;
}